# NiceGUI에서 Gradio 스타일 이미지 처리 구현

NiceGUI에는 Gradio의 `gr.Image()`처럼 이미지를 직접 numpy array로 받아 처리하는 내장 컴포넌트가 없습니다. 하지만 비슷한 기능을 구현할 수 있습니다.

## 1. NiceGUI vs Gradio 비교

### Gradio의 장점
- `gr.Image()`: 자동으로 numpy array로 변환
- 간단한 인터페이스 구성
- 이미지 처리 파이프라인 내장

### NiceGUI의 접근 방식
- `ui.upload()`: 파일 bytes로 받음
- PIL/numpy로 직접 변환 필요
- 더 많은 커스터마이징 가능

## 2. NiceGUI로 Gradio 스타일 구현

### 2.1 기본 구현
```python
from nicegui import ui
import numpy as np
from PIL import Image
import io
import base64

class ImageProcessor:
    def __init__(self):
        self.input_image = None
        self.output_image = None
        
    async def handle_upload(self, e):
        """업로드된 이미지를 numpy array로 변환"""
        # bytes -> PIL Image -> numpy array
        pil_image = Image.open(io.BytesIO(e.content))
        self.input_image = np.array(pil_image)
        
        # 처리
        self.output_image = self.process_image(self.input_image)
        
        # 결과 표시
        await self.update_display()
    
    def process_image(self, img_array):
        """이미지 처리 (예: sepia 필터)"""
        sepia_filter = np.array([
            [0.393, 0.769, 0.189],
            [0.349, 0.686, 0.168],
            [0.272, 0.534, 0.131]
        ])
        
        # RGB 이미지인 경우만 처리
        if len(img_array.shape) == 3:
            sepia_img = img_array.dot(sepia_filter.T)
            sepia_img = np.clip(sepia_img, 0, 255).astype(np.uint8)
            return sepia_img
        return img_array
    
    async def update_display(self):
        """처리된 이미지 표시"""
        if self.output_image is not None:
            # numpy array -> PIL Image -> base64
            pil_img = Image.fromarray(self.output_image)
            buffer = io.BytesIO()
            pil_img.save(buffer, format='PNG')
            base64_img = base64.b64encode(buffer.getvalue()).decode()
            
            # 이미지 업데이트
            self.result_image.set_source(f'data:image/png;base64,{base64_img}')

# UI 구성
processor = ImageProcessor()

with ui.row():
    with ui.column():
        ui.label('Input Image')
        ui.upload(on_upload=processor.handle_upload, accept='image/*')
        
    with ui.column():
        ui.label('Output Image')
        processor.result_image = ui.image().classes('w-64 h-64')

ui.run()
```

### 2.2 더 Gradio스러운 인터페이스
```python
from nicegui import ui
import numpy as np
from PIL import Image
import io
from typing import Callable

class GradioLikeInterface:
    """Gradio 스타일 인터페이스"""
    
    def __init__(self, fn: Callable, input_type='image', output_type='image'):
        self.process_fn = fn
        self.input_type = input_type
        self.output_type = output_type
        self.input_element = None
        self.output_element = None
        
    def create_ui(self):
        with ui.card().classes('w-full max-w-4xl mx-auto p-4'):
            ui.label(self.process_fn.__name__).classes('text-2xl font-bold mb-4')
            
            with ui.row().classes('w-full gap-4'):
                # Input column
                with ui.column().classes('flex-1'):
                    ui.label('Input').classes('text-lg font-semibold mb-2')
                    
                    if self.input_type == 'image':
                        # 이미지 미리보기
                        self.input_preview = ui.image().classes('w-full h-64 object-contain bg-gray-100 rounded mb-2')
                        
                        # 업로드 버튼
                        self.upload = ui.upload(
                            on_upload=self._handle_upload,
                            accept='image/*',
                            auto_upload=True
                        ).props('outlined')
                        
                        # 추가 입력 옵션
                        with ui.row().classes('gap-2 mt-2'):
                            ui.button('Clear', on_click=self._clear_input).props('outline')
                            ui.button('Example', on_click=self._load_example).props('outline')
                
                # Output column
                with ui.column().classes('flex-1'):
                    ui.label('Output').classes('text-lg font-semibold mb-2')
                    
                    if self.output_type == 'image':
                        self.output_element = ui.image().classes('w-full h-64 object-contain bg-gray-100 rounded')
                        
                        # 출력 옵션
                        with ui.row().classes('gap-2 mt-2'):
                            self.download_btn = ui.button('Download', on_click=self._download_output).props('outline')
                            self.download_btn.set_enabled(False)
            
            # Submit 버튼
            self.submit_btn = ui.button('Submit', on_click=self._process).props('unelevated').classes('w-full mt-4')
            self.submit_btn.set_enabled(False)
    
    async def _handle_upload(self, e):
        """이미지 업로드 처리"""
        try:
            # 이미지를 numpy array로 변환
            pil_image = Image.open(io.BytesIO(e.content))
            self.input_array = np.array(pil_image)
            
            # 미리보기 업데이트
            await self._update_preview(e.content)
            
            # 버튼 활성화
            self.submit_btn.set_enabled(True)
            
        except Exception as ex:
            ui.notify(f'Error: {str(ex)}', type='negative')
    
    async def _update_preview(self, image_bytes):
        """입력 이미지 미리보기 업데이트"""
        base64_img = base64.b64encode(image_bytes).decode()
        self.input_preview.set_source(f'data:image/png;base64,{base64_img}')
    
    async def _process(self):
        """이미지 처리 실행"""
        if hasattr(self, 'input_array'):
            try:
                # 처리 함수 실행
                output_array = self.process_fn(self.input_array)
                
                # 결과를 이미지로 변환
                if isinstance(output_array, np.ndarray):
                    # 정규화
                    if output_array.max() > 1.0:
                        output_array = output_array.astype(np.uint8)
                    else:
                        output_array = (output_array * 255).astype(np.uint8)
                    
                    # PIL 이미지로 변환
                    output_pil = Image.fromarray(output_array)
                    
                    # base64로 인코딩
                    buffer = io.BytesIO()
                    output_pil.save(buffer, format='PNG')
                    self.output_bytes = buffer.getvalue()
                    base64_output = base64.b64encode(self.output_bytes).decode()
                    
                    # 출력 업데이트
                    self.output_element.set_source(f'data:image/png;base64,{base64_output}')
                    self.download_btn.set_enabled(True)
                    
            except Exception as ex:
                ui.notify(f'Processing error: {str(ex)}', type='negative')
    
    def launch(self):
        """UI 실행"""
        self.create_ui()
        return self

# 사용 예제
def sepia(input_img):
    """Sepia 필터 적용"""
    sepia_filter = np.array([
        [0.393, 0.769, 0.189],
        [0.349, 0.686, 0.168],
        [0.272, 0.534, 0.131]
    ])
    
    if len(input_img.shape) == 3:  # RGB 이미지
        sepia_img = input_img.dot(sepia_filter.T)
        sepia_img = np.clip(sepia_img, 0, 255)
        return sepia_img
    return input_img

# Gradio 스타일로 사용
demo = GradioLikeInterface(sepia, input_type='image', output_type='image')
demo.launch()

ui.run()
```

### 2.3 NiceDiffusion 프로젝트에 통합
```python
# ImagePad에 numpy array 지원 추가
class ImagePad:
    def get_image_array(self) -> Optional[np.ndarray]:
        """현재 이미지를 numpy array로 반환"""
        if self.state.get('init_image'):
            pil_image = self.state.get('init_image')
            return np.array(pil_image)
        return None
    
    def set_image_array(self, array: np.ndarray):
        """numpy array를 이미지로 설정"""
        # numpy array -> PIL Image
        if array.dtype != np.uint8:
            array = (array * 255).astype(np.uint8)
        
        pil_image = Image.fromarray(array)
        self.state.set('init_image', pil_image)
        
        # UI 업데이트
        self._update_display()
    
    async def apply_filter(self, filter_fn: Callable):
        """필터 함수 적용"""
        img_array = self.get_image_array()
        if img_array is not None:
            processed = filter_fn(img_array)
            self.set_image_array(processed)
```

## 3. 장단점 비교

### Gradio의 장점
- 더 간단한 코드
- 자동 타입 변환
- 내장된 예제 기능

### NiceGUI의 장점
- 더 세밀한 UI 제어
- 복잡한 레이아웃 가능
- 다른 컴포넌트와 통합 용이
- 실시간 업데이트 가능

NiceGUI로도 Gradio와 비슷한 사용자 경험을 만들 수 있지만, 조금 더 많은 코드가 필요합니다.
