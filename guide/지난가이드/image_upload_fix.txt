문제를 종합하면:

1. **드래그앤드롭한 이미지가 Canvas 일부에만 표시됨**
2. **numpy 데이터로 제대로 전달 안됨** 
3. **UI 업데이트 시 컨텍스트 오류 발생**

## 근본 원인
- JavaScript Canvas와 Python numpy 데이터가 분리됨
- NiceGUI UI 컨텍스트 밖에서 UI 업데이트 시도
- `/api/upload_image` → StateManager → UI 이벤트 체인이 끊어짐

## 통합 해결책

### 1. **API 엔드포인트에서 StateManager 직접 연결**
```python
# main.py에 추가
@app.post("/api/upload_image")
async def upload_image(file: UploadFile):
    # numpy 변환
    content = await file.read()
    pil_image = Image.open(io.BytesIO(content))
    np_image = np.array(pil_image)
    
    # 전역 StateManager 인스턴스 사용
    if hasattr(app, 'state_manager'):
        # numpy 저장
        app.state_manager.set('uploaded_image', np_image)
        # PIL 저장 (img2img용)
        app.state_manager.set_init_image(pil_image)
    
    # base64 반환
    return {"success": True, "base64": base64_str, ...}
```

### 2. **ImagePad에서 JavaScript만으로 UI 업데이트**
```python
# image_pad.py의 _on_uploaded_image_changed 수정
async def _on_uploaded_image_changed(self, np_image):
    # UI 컨텍스트 오류 방지 - JavaScript만 사용
    if np_image is not None:
        # numpy → base64 (UI 컨텍스트 불필요)
        pil_image = Image.fromarray(np_image)
        buf = io.BytesIO()
        pil_image.save(buf, format='PNG')
        b64 = base64.b64encode(buf.getvalue()).decode('utf-8')
        
        # JavaScript로만 업데이트
        ui.run_javascript(f'''
            // 프리뷰 업데이트
            const preview = document.getElementById('uploaded-image-preview');
            if (preview) {{
                preview.innerHTML = `
                    <img src="data:image/png;base64,{b64}" 
                         style="max-width:300px;max-height:200px;" />
                `;
            }}
            
            // Canvas 전체 영역에 맞춤
            if (window.canvasManager) {{
                const canvas = document.getElementById('imagepad-canvas');
                if (canvas) {{
                    // Canvas 크기를 컨테이너에 맞춤
                    canvas.width = canvas.parentElement.clientWidth;
                    canvas.height = canvas.parentElement.clientHeight;
                    
                    // 이미지를 Canvas 전체에 표시
                    window.canvasManager.loadImageFit(
                        "data:image/png;base64,{b64}", 
                        canvas.width, 
                        canvas.height
                    );
                }}
            }}
        ''')
```

### 3. **Canvas 크기 문제 해결**
```javascript
// canvas_manager.js 수정
loadImageFit(imageData, containerWidth, containerHeight) {
    const canvas = document.getElementById('imagepad-canvas');
    if (!canvas) return;
    
    // Canvas를 컨테이너 크기에 맞춤
    canvas.width = containerWidth;
    canvas.height = containerHeight;
    
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
        // 이미지를 Canvas 중앙에 맞춤
        const scale = Math.min(
            containerWidth / img.width, 
            containerHeight / img.height
        );
        const x = (containerWidth - img.width * scale) / 2;
        const y = (containerHeight - img.height * scale) / 2;
        
        ctx.clearRect(0, 0, containerWidth, containerHeight);
        ctx.drawImage(img, x, y, img.width * scale, img.height * scale);
    };
    
    img.src = imageData;
}
```

이렇게 하면:
- numpy 데이터가 확실히 전달됨
- UI 컨텍스트 오류 없음
- Canvas가 전체 영역에 표시됨
