# 이미지 업로드 및 VAE 인코딩 시스템 기술 명세서

## 1. 시스템 개요

### 1.1 목적
대규모 프로젝트 내 이미지 처리 파이프라인의 일부로, 이미지를 VAE를 통해 latent space로 변환하는 모듈

### 1.2 핵심 요구사항
- 이미지 크기 동적 처리
- 모델별 최소 크기 제약 관리
- NiceGUI 업로드 이슈 해결

## 2. 기술적 요구사항

### 2.1 이미지 크기 처리 로직

#### 2.1.1 크기 설정 시스템 구조
```python
class SizeConfiguration:
    """크기 설정 관리 클래스"""
    
    MODEL_CONSTRAINTS = {
        'SDXL': {'min_size': 768},
        'SD15': {'min_size': 480}
    }
    
    def __init__(self):
        self.use_original_size = False
        self.custom_width = None
        self.custom_height = None
        self.current_model = 'SDXL'
        self.original_dimensions = None
```

#### 2.1.2 상태 전환 로직
```
State Machine:
- INITIAL: 초기 상태
- IMAGE_LOADED: 이미지 로드 완료
- SIZE_VALIDATED: 크기 검증 완료
- READY_TO_ENCODE: 인코딩 준비 완료
```

#### 2.1.3 크기 검증 프로세스
1. **이미지 업로드 시점**
   - 원본 이미지 dimensions 추출
   - 현재 선택된 모델의 최소 크기 요구사항 확인
   - 원본 크기 사용 가능 여부 판단

2. **모델 변경 시점**
   - 새 모델의 최소 크기 요구사항 로드
   - 현재 이미지 크기와 비교
   - UI 상태 업데이트 트리거

3. **검증 규칙**
   ```python
   def validate_size_eligibility(self, width, height, model):
       min_size = self.MODEL_CONSTRAINTS[model]['min_size']
       return min(width, height) >= min_size
   ```

### 2.2 NiceGUI 업로드 문제 해결

#### 2.2.1 문제 정의
- NiceGUI의 기본 업로드 위젯이 중간 상태를 유지
- 파일 선택 후 미리보기로 전환되지 않는 이슈

#### 2.2.2 기술적 해결 방안

**Option 1: Event-Driven Immediate Preview**
```python
class ImmediatePreviewHandler:
    def __init__(self):
        self.file_reader = None
        self.preview_container = None
        
    async def handle_file_selection(self, file_event):
        # 1. 파일 읽기 시작과 동시에 UI 전환
        # 2. Base64 변환을 비동기로 처리
        # 3. 변환 완료 즉시 preview_container 업데이트
        pass
```

**Option 2: Custom Upload Component**
```python
class CustomUploadComponent:
    def create_upload_area(self):
        # 1. HTML5 File API 직접 활용
        # 2. JavaScript로 파일 선택 즉시 처리
        # 3. Python 콜백으로 데이터 전달
        pass
```

**Option 3: State-Based Rendering**
```python
class StateRenderer:
    def render_based_on_state(self, state):
        # state가 'FILE_SELECTED'로 변경되면
        # 즉시 upload widget을 숨기고
        # preview widget을 표시
        pass
```

## 3. 데이터 플로우

### 3.1 크기 설정 플로우
```
이미지 업로드
    ↓
원본 크기 추출 (W x H)
    ↓
모델 타입 확인 (SDXL/SD15)
    ↓
최소 크기 검증 (min(W,H) >= threshold)
    ↓
[분기]
├─ 통과: use_original_size 옵션 활성화
└─ 실패: use_original_size 옵션 비활성화
           ↓
         사용자 정의 크기 강제
```

### 3.2 백엔드 전송 데이터 구조
```json
{
    "image_data": "base64_encoded_string",
    "processing_config": {
        "use_original_size": true/false,
        "target_dimensions": {
            "width": 1024,
            "height": 1024
        },
        "model_type": "SDXL/SD15",
        "resize_method": "lanczos/bilinear"
    },
    "metadata": {
        "original_width": 1920,
        "original_height": 1080,
        "file_format": "jpeg/png",
        "file_size_bytes": 2048000
    }
}
```

## 4. 백엔드 처리 사양

### 4.1 이미지 전처리 파이프라인
```python
class ImagePreprocessor:
    def preprocess(self, image_data, config):
        # 1. 바이트 스트림 → NumPy 배열
        # 2. 크기 조정 (필요시)
        # 3. 정규화 (0-1 or -1~1)
        # 4. 차원 조정 (B,C,H,W)
        # 5. 디바이스 할당 (CPU/GPU)
        pass
```

### 4.2 VAE 인코딩 인터페이스
```python
class VAEEncoder:
    def encode(self, preprocessed_image):
        # 1. 모델 로드 (캐시 활용)
        # 2. 인코딩 실행
        # 3. Latent 추출
        # 4. 후처리 (필요시)
        return {
            'latent': latent_tensor,
            'shape': latent_shape,
            'statistics': compute_stats(latent_tensor)
        }
```

## 5. 에러 처리 전략

### 5.1 크기 관련 에러
- `SizeBelowMinimumError`: 최소 크기 미달
- `AspectRatioError`: 지원하지 않는 종횡비
- `ResolutionTooHighError`: 메모리 제한 초과

### 5.2 처리 관련 에러
- `ModelLoadError`: VAE 모델 로드 실패
- `EncodingError`: 인코딩 프로세스 실패
- `MemoryError`: GPU/CPU 메모리 부족

## 6. 성능 고려사항

### 6.1 메모리 최적화
- 이미지 처리 시 원본 즉시 해제
- 배치 처리 시 청크 단위 처리
- GPU 메모리 모니터링

### 6.2 처리 속도 최적화
- 모델 사전 로드 및 웜업
- 이미지 전처리 병렬화
- 결과 캐싱 (옵션)

## 7. 통합 인터페이스

### 7.1 모듈 진입점
```python
class ImageToLatentModule:
    def __init__(self, config):
        self.size_manager = SizeConfiguration()
        self.upload_handler = UploadHandler()
        self.encoder = VAEEncoder(config)
        
    async def process_image(self, image_data, options):
        # 통합 처리 플로우
        pass
```

### 7.2 이벤트 콜백
```python
# 다른 시스템과의 통합을 위한 콜백
callbacks = {
    'on_upload_start': lambda: None,
    'on_size_validated': lambda valid: None,
    'on_encoding_complete': lambda result: None,
    'on_error': lambda error: None
}
```

이 명세서는 시스템의 기술적 구현에 집중하며, UI 레이아웃이나 디자인 요소는 제외하고 핵심 로직과 데이터 플로우에 중점을 둡니다.
